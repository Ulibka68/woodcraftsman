.b-vertical-carousel-slider {
  position: relative;
  overflow: hidden;
  height: $itemHeight * 3;

  .vertical-carousel-slider-item {
    height: $itemHeight;
  }
}

@keyframes shadowAnimation {
  0% {
    opacity: 1;
  }
  80% {
    opacity: 1;
  }
  90% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}


@mixin verticalSlideAnimation($itemCount) {
  @for $i from 1 through   $itemCount {
    $animationName: carousel-item-#{$itemCount}-#{$i};

    @keyframes #{$animationName} {
      0% {
        transform: translate3d(0, 0, 0) scale(.95);
      }
    }

    //.vertical-carousel-slider-item:nchild(#{$i}) {
    //  animation: $stepDuration * $itemCount $animation ease infinite;
    //}
  }
}

@function getPercentForStep($step, $count, $offset: 0) {
  @return 100% * $step / $count - $offset;
}

@function getTranslate($step) {
  @return translate3d(0, -100% * $step, 0);
}

$animationTime : 3;

@keyframes #{$animationName} {
  0% {
    transform: translate3d(0, 0, 0) scale(.95);
  }

  @for $j from 0 through $itemCount {
    $isFocusedStep: $i == $j + 2;
    $isNotPrevStep: $i != $j + 1;
    $offset: 100% / $itemCount * ($animationTime / $stepDuration);

    @if ($isFocusedStep) {
      #{getPercentForStep($j, $itemCount, $offset)} {
        transform: getTranslate($j - 1) scale(.95);
      }

      #{getPercentForStep($j, $itemCount)} {
        transform: getTranslate($j) scale(1);
      }

      #{getPercentForStep($j + 1, $itemCount, $offset)} {
        transform: getTranslate($j) scale(1);
      }

      #{getPercentForStep($j + 1, $itemCount)} {
        transform: getTranslate($j + 1) scale(.95);
      }
    } @else if ($isNotPrevStep) {
      #{getPercentForStep($j, $itemCount, $offset)} {
        transform: getTranslate($j - 1) scale(.95);
      }

      #{getPercentForStep($j, $itemCount)} {
        transform: getTranslate($j) scale(.95);
      }
    }
  }
}

.vertical-carousel-slider-shadow {
  top: $itemHeight;
  left: 0;
  right: 0;
  height: $itemHeight;

  animation: $stepDuration shadowAnimation ease infinite;
}